@model IEnumerable<FleetVision.Models.Employee>

<h2>Employees</h2>

<p>
    <button class="btn btn-primary rounded-pill" data-bs-toggle="modal" data-bs-target="#createModal">Create New</button>
</p>

<div class="table-responsive p-2 rounded-3">
    <table class="table table-hover table-striped rounded-3 overflow-hidden shadow">
        <thead class="table-dark rounded-top">
            <tr class="rounded-top">
                <th scope="col">ID</th>
                <th scope="col">Name</th>
                <th scope="col">Position</th>
                <th scope="col">Department</th>
                <th scope="col">Email</th>
                <th scope="col">Profile Picture</th>
                <th scope="col">QR Code</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody class="rounded-bottom">
            @foreach (var item in Model)
            {
                <tr class="rounded-bottom">
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Position</td>
                    <td>@item.Department</td>
                    <td>@item.Email</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.ImagePath))
                        {
                            <img src="@item.ImagePath" alt="Profile Picture" class="img-thumbnail rounded" width="100" height="100" />
                        }
                        else
                        {
                            <span class="text-danger">No Image Available</span>
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.QRCode))
                        {
                            <img src="@item.QRCode" alt="QR Code" class="img-thumbnail rounded" width="100" height="100" />
                        }
                        else
                        {
                            <span class="text-danger">QR Code not available</span>
                        }
                    </td>
                    <td>
                        <div class="d-flex gap-2">
                            <button class="btn btn-warning rounded-pill" data-bs-toggle="modal" data-bs-target="#editModal" onclick="editEmployee(@item.Id, '@item.Name', '@item.Position', '@item.Department', '@item.Email', '@item.ImagePath')">Edit</button>
                            <button class="btn btn-danger rounded-pill" data-bs-toggle="modal" data-bs-target="#deleteModal" onclick="deleteEmployee(@item.Id, '@item.Name')">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!-- Create Modal -->
<div class="modal fade" id="createModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createForm" method="post" action="/Employee/Create" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input name="Name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" name="Email" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Position</label>
                        <select name="Position" class="form-control" required>
                            <option value="" disabled selected>Select a Position</option>
                            <option value="Dispatcher">Dispatcher</option>
                            <option value="Driver">Driver</option>
                            <option value="Parcel Scanner">Parcel Scanner</option>
                            <option value="Warehouse Staff">Warehouse Staff</option>
                            <option value="Supervisor">Supervisor</option>
                            <option value="Guard">Guard</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Department</label>
                        <input name="Department" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Profile Picture</label>
                        <input type="file" name="ImageFile" class="form-control" accept="image/*" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password (Auto-Generated)</label>
                        <input type="text" class="form-control" value="Generated Automatically" disabled />
                    </div>
                    <button type="submit" class="btn btn-primary">Create</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" method="post" action="/Employee/Edit" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Id" id="editId" />
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input name="Name" id="editName" class="form-control" required />
                    </div>
                    <div class="mb-3 d-none">
                        <label class="form-label">Email</label>
                        <input type="email" name="Email" id="editEmail" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Position</label>
                        <select name="Position" id="editPosition" class="form-control" required>
                            <option value="" disabled>Select a Position</option>
                            <option value="Dispatcher">Dispatcher</option>
                            <option value="Driver">Driver</option>
                            <option value="Parcel Scanner">Parcel Scanner</option>
                            <option value="Warehouse Staff">Warehouse Staff</option>
                            <option value="Supervisor">Supervisor</option>
                            <option value="Guard">Guard</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Department</label>
                        <input name="Department" id="editDepartment" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Current Profile Picture</label>
                        <img id="editProfilePicture" class="img-thumbnail rounded" width="100" height="100" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Change Profile Picture</label>
                        <input type="file" name="ImageFile" id="editImageFile" class="form-control" accept="image/*" />
                    </div>
                    <button type="submit" class="btn btn-warning">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="deleteName"></strong>?</p>
                <form id="deleteForm" method="post" action="/Employee/Delete">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Id" id="deleteId" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmationModalMessage">Are you sure?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmBtn">Yes</button>
            </div>
        </div>
    </div>
</div>

<!-- Default Password Modal -->
<div class="modal fade" id="defaultPasswordModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Employee Created</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>The default password for the new employee is:</p>
                <div class="input-group mb-3">
                    <input id="defaultPasswordText" type="text" class="form-control" readonly />
                    <button class="btn btn-outline-secondary" type="button" onclick="copyToClipboard()">
                        <i class="bi bi-clipboard"></i> Copy
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="closeModalBtn">OK</button>
            </div>
        </div>
    </div>
</div>


<!-- Toast Container (Fixed at Top-Right) -->
<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050; top: 90vh; right: 1vw;"></div>

<!-- Toast Template (Hidden) -->
<div id="toastTemplate" class="toast align-items-center shadow-lg" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            <strong class="me-auto">Notification</strong>
            <p class="mb-0" id="toastMessage"></p>
        </div>
        @* <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button> *@
    </div>
</div>


<script>

    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toastContainer');
        const toastTemplate = document.getElementById('toastTemplate');

        // Clone toast template
        const toast = toastTemplate.cloneNode(true);
        toast.removeAttribute("id"); // Prevent duplicate IDs
        toast.querySelector("#toastMessage").textContent = message;

        // Set colors & icon based on type
        toast.classList.add("text-white", "rounded-3", "border-0");
        if (type === "success") {
            toast.classList.add("bg-success");
        } else if (type === "error") {
            toast.classList.add("bg-danger");
        } else if (type === "warning") {
            toast.classList.add("bg-warning", "text-dark");
        } else {
            toast.classList.add("bg-primary");
        }

        // Append & show toast
        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
        bsToast.show();

        // Auto-remove toast after it disappears
        toast.addEventListener("hidden.bs.toast", () => {
            toast.remove();
        });
    }


    document.getElementById('createForm').addEventListener('submit', function (e) {
        e.preventDefault();
        showConfirmationModal("Are you sure you want to add this employee?", submitCreateForm);
    });

    function submitCreateForm() {
        const formElement = document.getElementById('createForm');
        const formData = new FormData(formElement);

        const token = formElement.querySelector('input[name="__RequestVerificationToken"]').value;

        console.log("Sending fetch request with data:", formData);

        fetch(formElement.action, {
            method: 'POST',
            body: formData, // Send FormData (NOT JSON)
            headers: {
                'RequestVerificationToken': token // CSRF token in header
            }
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => { throw new Error(text); });
            }
            return response.json();
        })
        .then(data => {
            console.log("Data received:", data);
            if (data.success) {
                showToast(data.message, true);
                $('#createModal').modal('hide');

                if (data.defaultPassword) {
                    console.log("Default password:", data.defaultPassword);
                    document.getElementById("defaultPasswordText").value = data.defaultPassword;
                    var dpModalEl = document.getElementById('defaultPasswordModal');
                    var dpModal = new bootstrap.Modal(dpModalEl);
                    dpModal.show();

                    document.getElementById("closeModalBtn").addEventListener("click", function () {
                        dpModal.hide();
                        location.reload();
                    });
                } else {
                    location.reload();
                }
            } else {
                showToast(data.message, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred. Please try again.', false);
        });
    }

    function copyToClipboard() {
            const copyText = document.getElementById("defaultPasswordText");
            navigator.clipboard.writeText(copyText.value)
                .then(() => {
                    showToast("Default password copied to clipboard!", true);
                })
                .catch(err => {
                    console.error("Failed to copy: ", err);
                    showToast("Failed to copy password. Please try manually.", false);
                });
    }


    document.getElementById('editForm').addEventListener('submit', function (e) {
        e.preventDefault();
        showConfirmationModal("Are you sure you want to edit this employee?", submitEditForm);
    });

    function submitEditForm() {
        const formData = new FormData(document.getElementById('editForm'));
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(document.getElementById('editForm').action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, true);
                $('#editModal').modal('hide');
                setTimeout(() => {
                    location.reload();
                }, 3000);
            } else {
                showToast(data.message, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred. Please try again.', false);
        });
    }



    document.getElementById('deleteForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, true);
                $('#deleteModal').modal('hide');
                setTimeout(() => {
                    location.reload();
                }, 3000); // Delay reload for 3 seconds
            } else {
                showToast(data.message, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred. Please try again.', false);
        });
    });

    function showConfirmationModal(message, callback) {
        // Set the confirmation message
        const modalMessageElement = document.getElementById('confirmationModalMessage');
        modalMessageElement.textContent = message;

        // Replace the confirm button to clear previous event listeners
        const oldConfirmButton = document.getElementById('confirmBtn');
        const newConfirmButton = oldConfirmButton.cloneNode(true);
        oldConfirmButton.parentNode.replaceChild(newConfirmButton, oldConfirmButton);

        // When the user confirms, run the callback and hide the modal
        newConfirmButton.addEventListener('click', function () {
            callback();
            const confirmationModalEl = document.getElementById('confirmationModal');
            const modalInstance = bootstrap.Modal.getInstance(confirmationModalEl);
            if (modalInstance) {
                modalInstance.hide();
            }
        });

        // Show the modal
        const confirmationModalEl = document.getElementById('confirmationModal');
        const modalInstance = new bootstrap.Modal(confirmationModalEl);
        modalInstance.show();
    }


    function editEmployee(id, name, position, department, email, imagePath) {
        document.getElementById('editId').value = id;
        document.getElementById('editName').value = name;
        document.getElementById('editDepartment').value = department;
        document.getElementById('editEmail').value = email;

        // Set position dropdown
        let positionDropdown = document.getElementById('editPosition');
        for (let i = 0; i < positionDropdown.options.length; i++) {
            if (positionDropdown.options[i].value === position) {
                positionDropdown.selectedIndex = i;
                break;
            }
        }

        // Handle profile picture preview
        let profileImage = document.getElementById('editProfilePicture');
        if (imagePath && imagePath.trim() !== '') {
            profileImage.src = imagePath;
            profileImage.style.display = 'block';
        } else {
            profileImage.src = '';
            profileImage.style.display = 'none';
        }
    }


    function deleteEmployee(id, name) {
        document.getElementById('deleteId').value = id;
        document.getElementById('deleteName').innerText = name;
    }


document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".modal").forEach(function (modal) {
        modal.addEventListener("show.bs.modal", function () {
            let zIndex = 1050 + (document.querySelectorAll(".modal.show").length * 10);
            this.style.zIndex = zIndex;

            setTimeout(() => {
                document.querySelectorAll(".modal-backdrop").forEach(backdrop => {
                    if (!backdrop.classList.contains("modal-stack")) {
                        backdrop.style.zIndex = zIndex - 1;
                        backdrop.classList.add("modal-stack");
                    }
                });
            }, 0);
        });

        modal.addEventListener("hidden.bs.modal", function () {
            if (document.querySelectorAll(".modal.show").length > 0) {
                document.body.classList.add("modal-open");
            } else {
                document.body.classList.remove("modal-open");
            }
        });
    });
});

</script>