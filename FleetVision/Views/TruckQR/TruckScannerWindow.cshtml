@{
    Layout = null;  // No layout for a clean scanner window
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>QR Scanner</title>

    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

    <style>
        body {
            background: #111;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            padding: 20px;
        }

        .scanner-container {
            width: 100%;
            max-width: 350px;
            text-align: center;
        }

        video {
            width: 100%;
            border-radius: 8px;
            border: 2px solid #28a745;
        }

        #result {
            background: #222;
            color: white;
            border: 1px solid #28a745;
            text-align: center;
            font-size: 16px;
            padding: 8px;
            margin-top: 12px;
            border-radius: 5px;
        }
    </style>
</head>
<body>

    <div class="scanner-container">
        <h4 class="mb-3">Scan QR Code</h4>
        <video id="webcam" autoplay playsinline></video>
        <canvas id="canvas" class="d-none"></canvas>
        <input type="text" id="result" readonly placeholder="Waiting for scan..." class="form-control mt-3">
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            const video = document.getElementById("webcam");
            const canvas = document.getElementById("canvas");
            const resultInput = document.getElementById("result");
            let stream;
            let lastScannedCode = "";

            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } });
                video.srcObject = stream;
                requestAnimationFrame(scanFrame);
            } catch (err) {
                console.error("Error accessing webcam:", err);
                alert("Unable to access camera.");
            }

            function scanFrame() {
                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    const context = canvas.getContext("2d");
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);
                    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, imageData.width, imageData.height, {
                        inversionAttempts: "dontInvert",
                    });

                    if (code && code.data !== lastScannedCode) {
                        lastScannedCode = code.data;
                        resultInput.value = code.data;
                        localStorage.setItem("scannedQRCode", code.data);
                        setTimeout(() => (lastScannedCode = ""), 5000);
                    }
                }
                requestAnimationFrame(scanFrame);
            }
        });
    </script>

</body>
</html>
