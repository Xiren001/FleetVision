@model IEnumerable<FleetVision.Models.Truck>

<h2>Truck</h2>

<p>
    <button class="btn btn-primary rounded-pill" data-bs-toggle="modal" data-bs-target="#createModal">Create New</button>
</p>

<div class="table-responsive p-2 rounded-3">
    <table class="table table-hover table-striped rounded-3 overflow-hidden shadow">
        <thead class="table-dark rounded-top">
            <tr class="rounded-top">
                <th scope="col">Plate Number</th>
                <th scope="col">VIN</th>
                <th scope="col">Make</th>
                <th scope="col">Model</th>
                <th scope="col">Year</th>
                <th scope="col">Color</th>
                <th scope="col">Fuel Type</th>
                <th scope="col">Gross Weight</th>
                <th scope="col">Payload Capacity</th>
                <th scope="col">Fuel Capacity</th>
                <th scope="col">Image</th> <!-- Added Image Column -->
                <th scope="col">QR Code</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody class="rounded-bottom">
            @foreach (var truck in Model)
            {
                <tr class="rounded-bottom">
                    <td>@truck.PlateNumber</td>
                    <td>@truck.VIN</td>
                    <td>@truck.Make</td>
                    <td>@truck.Model</td>
                    <td>@truck.Year</td>
                    <td>@truck.Color</td>
                    <td>@truck.FuelType</td>
                    <td>@truck.GrossWeight</td>
                    <td>@truck.PayloadCapacity</td>
                    <td>@truck.FuelCapacity</td>
                    <td>
                        @if (truck.Image != null)
                        {
                            <img src="data:image/png;base64,@(Convert.ToBase64String(truck.Image))"
                                 alt="Truck Image" class="img-thumbnail rounded" width="100" height="100" />
                        }
                        else
                        {
                            <span class="text-danger">No Image</span>
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(truck.QRCode))
                        {
                            <img src="@truck.QRCode" alt="QR Code" class="img-thumbnail rounded" width="100" height="100" />
                        }
                        else
                        {
                            <span class="text-danger">QR Code not available</span>
                        }
                    </td>
                    <td>
                        <div class="d-flex gap-2">
                            <button class="btn btn-warning rounded-pill"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editModal"
                                    onclick="editTruck(@truck.Id,
        '@Html.Raw(truck.PlateNumber)',
        '@Html.Raw(truck.VIN)',
        '@Html.Raw(truck.Make)',
        '@Html.Raw(truck.Model)',
        @truck.Year,
        '@Html.Raw(truck.Color)',
        '@Html.Raw(truck.FuelType)',
        @truck.GrossWeight,
        @truck.PayloadCapacity,
        @truck.FuelCapacity)">

                                Edit
                            </button>

                            <button class="btn btn-danger rounded-pill" data-bs-toggle="modal" data-bs-target="#deleteModal" onclick="deleteTruck(@truck.Id, '@truck.PlateNumber')">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!-- Create Truck Modal -->
<div class="modal fade" id="createModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Truck</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createForm" method="post" action="/Truck/Create" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()

                    <div class="mb-3">
                        <label class="form-label">Plate Number</label>
                        <input name="PlateNumber" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">VIN</label>
                        <input name="VIN" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Make</label>
                        <input name="Make" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Model</label>
                        <input name="Model" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Year</label>
                        <input type="number" name="Year" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Color</label>
                        <input name="Color" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Type</label>
                        <input name="FuelType" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Gross Weight (kg/lbs)</label>
                        <input type="number" step="0.01" name="GrossWeight" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Payload Capacity (kg/lbs)</label>
                        <input type="number" step="0.01" name="PayloadCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Capacity (liters/gallons)</label>
                        <input type="number" step="0.01" name="FuelCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Truck Image</label>
                        <input type="file" name="ImageFile" class="form-control" accept="image/*" />
                    </div>

                    <button type="submit" class="btn btn-primary">Create</button>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- Edit Truck Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Truck</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" method="post" action="/Truck/Edit" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Id" id="editId" />


                    <div class="mb-3">
                        <label class="form-label">Plate Number</label>
                        <input name="PlateNumber" id="editPlateNumber" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">VIN</label>
                        <input name="VIN" id="editVIN" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Make</label>
                        <input name="Make" id="editMake" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Model</label>
                        <input name="Model" id="editModel" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Year</label>
                        <input type="number" name="Year" id="editYear" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Color</label>
                        <input name="Color" id="editColor" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Type</label>
                        <input name="FuelType" id="editFuelType" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Gross Weight (kg/lbs)</label>
                        <input type="number" step="0.01" name="GrossWeight" id="editGrossWeight" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Payload Capacity (kg/lbs)</label>
                        <input type="number" step="0.01" name="PayloadCapacity" id="editPayloadCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Capacity (liters/gallons)</label>
                        <input type="number" step="0.01" name="FuelCapacity" id="editFuelCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Truck Image</label>
                        <input type="file" name="ImageFile" id="editImageFile" class="form-control" accept="image/*" />
                    </div>

                    <button type="submit" class="btn btn-warning">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- Delete Truck Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Truck</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete truck with Plate Number: <strong id="deletePlateNumber"></strong>?</p>
                <form id="deleteForm" method="post" action="/Truck/Delete">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Id" id="deleteId" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmationModalMessage">Are you sure you want to proceed with this action?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmBtn">Yes</button>
            </div>
        </div>
    </div>
</div>



<!-- Toast Container (Fixed at Top-Right) -->
<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050; top: 90vh; right: 1vw;"></div>

<!-- Toast Template (Hidden) -->
<div id="toastTemplate" class="toast align-items-center shadow-lg" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            <strong class="me-auto">Notification</strong>
            <p class="mb-0" id="toastMessage"></p>
        </div>
        @* <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button> *@
    </div>
</div>


<script>

    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toastContainer');
        const toastTemplate = document.getElementById('toastTemplate');

        // Clone toast template
        const toast = toastTemplate.cloneNode(true);
        toast.removeAttribute("id"); // Prevent duplicate IDs
        toast.querySelector("#toastMessage").textContent = message;

        // Set colors & icon based on type
        toast.classList.add("text-white", "rounded-3", "border-0");
        if (type === "success") {
            toast.classList.add("bg-success");
        } else if (type === "error") {
            toast.classList.add("bg-danger");
        } else if (type === "warning") {
            toast.classList.add("bg-warning", "text-dark");
        } else {
            toast.classList.add("bg-primary");
        }

        // Append & show toast
        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
        bsToast.show();

        // Auto-remove toast after it disappears
        toast.addEventListener("hidden.bs.toast", () => {
            toast.remove();
        });
    }


        document.getElementById('createForm').addEventListener('submit', function (e) {
        e.preventDefault();
        showConfirmationModal("Are you sure you want to add this truck?", submitCreateForm);
    });

    function submitCreateForm() {
        const formData = new FormData(document.getElementById('createForm'));
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(document.getElementById('createForm').action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, "success");
                $('#createModal').modal('hide');
                location.reload();
            } else {
                showToast(data.message, "error");
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred. Please try again.', "error");
        });
    }

    document.getElementById('editForm').addEventListener('submit', function (e) {
        e.preventDefault();
        showConfirmationModal("Are you sure you want to edit this truck?", submitEditForm);
    });

    function submitEditForm() {
        const formData = new FormData(document.getElementById('editForm'));
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(document.getElementById('editForm').action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, true);
                $('#editModal').modal('hide');
                setTimeout(() => {
                    location.reload();
                }, 3000);
            } else {
                showToast(data.message, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred. Please try again.', false);
        });
    }

    document.getElementById('deleteForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, "success");
                $('#deleteModal').modal('hide');
                setTimeout(() => {
                    location.reload();
                }, 3000);
            } else {
                showToast(data.message, "error");
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred. Please try again.', "error");
        });
    });


    function showConfirmationModal(message, callback) {
        // Set the confirmation message
        const modalMessageElement = document.getElementById('confirmationModalMessage');
        modalMessageElement.textContent = message;

        // Replace the confirm button to clear previous event listeners
        const oldConfirmButton = document.getElementById('confirmBtn');
        const newConfirmButton = oldConfirmButton.cloneNode(true);
        oldConfirmButton.parentNode.replaceChild(newConfirmButton, oldConfirmButton);

        // When the user confirms, run the callback and hide the modal
        newConfirmButton.addEventListener('click', function () {
            callback();
            const confirmationModalEl = document.getElementById('confirmationModal');
            const modalInstance = bootstrap.Modal.getInstance(confirmationModalEl);
            if (modalInstance) {
                modalInstance.hide();
            }
        });

        // Show the modal
        const confirmationModalEl = document.getElementById('confirmationModal');
        const modalInstance = new bootstrap.Modal(confirmationModalEl);
        modalInstance.show();
    }

    function editTruck(id, plateNumber, vin, make, model, year, color, fuelType, grossWeight, payloadCapacity, fuelCapacity) {
        document.getElementById('editId').value = id;
        document.getElementById('editPlateNumber').value = plateNumber;
        document.getElementById('editVIN').value = vin;
        document.getElementById('editMake').value = make;
        document.getElementById('editModel').value = model;
        document.getElementById('editYear').value = year;
        document.getElementById('editColor').value = color;
        document.getElementById('editFuelType').value = fuelType;
        document.getElementById('editGrossWeight').value = grossWeight;
        document.getElementById('editPayloadCapacity').value = payloadCapacity;
        document.getElementById('editFuelCapacity').value = fuelCapacity;

        var editModalEl = document.getElementById('editModal');
        var editModal = bootstrap.Modal.getInstance(editModalEl) || new bootstrap.Modal(editModalEl);
        editModal.show();

    }

    function deleteTruck(id, plateNumber) {
        document.getElementById('deleteId').value = id;
        document.getElementById('deletePlateNumber').innerText = plateNumber;
    }

    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".modal").forEach(function (modal) {
            modal.addEventListener("show.bs.modal", function () {
                let zIndex = 1050 + (document.querySelectorAll(".modal.show").length * 10);
                this.style.zIndex = zIndex;

                setTimeout(() => {
                    document.querySelectorAll(".modal-backdrop").forEach(backdrop => {
                        if (!backdrop.classList.contains("modal-stack")) {
                            backdrop.style.zIndex = zIndex - 1;
                            backdrop.classList.add("modal-stack");
                        }
                    });
                }, 0);
            });

            modal.addEventListener("hidden.bs.modal", function () {
                if (document.querySelectorAll(".modal.show").length > 0) {
                    document.body.classList.add("modal-open");
                } else {
                    document.body.classList.remove("modal-open");
                }
            });
        });
    });


</script>
