@model IEnumerable<FleetVision.Models.Truck>

<h2>Truck</h2>

<p>
    <button class="btn btn-primary rounded-pill" data-bs-toggle="modal" data-bs-target="#createModal">Create New</button>
</p>

<div class="table-responsive p-2 rounded-3">
    <table class="table table-hover table-striped rounded-3 overflow-hidden shadow">
        <thead class="table-dark rounded-top">
            <tr class="rounded-top">
                <th scope="col">Plate Number</th>
                <th scope="col">VIN</th>
                <th scope="col">Make</th>
                <th scope="col">Model</th>
                <th scope="col">Year</th>
                <th scope="col">Color</th>
                <th scope="col">Fuel Type</th>
                <th scope="col">Gross Weight</th>
                <th scope="col">Payload Capacity</th>
                <th scope="col">Fuel Capacity</th>
                <th scope="col">Image</th> <!-- Added Image Column -->
                <th scope="col">QR Code</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody class="rounded-bottom">
            @foreach (var truck in Model)
            {
                <tr class="rounded-bottom">
                    <td>@truck.PlateNumber</td>
                    <td>@truck.VIN</td>
                    <td>@truck.Make</td>
                    <td>@truck.Model</td>
                    <td>@truck.Year</td>
                    <td>@truck.Color</td>
                    <td>@truck.FuelType</td>
                    <td>@truck.GrossWeight</td>
                    <td>@truck.PayloadCapacity</td>
                    <td>@truck.FuelCapacity</td>
                    <td>
                        @if (truck.Image != null)
                        {
                            <img src="data:image/png;base64,@(Convert.ToBase64String(truck.Image))"
                                 alt="Truck Image" class="img-thumbnail rounded" width="100" height="100" />
                        }
                        else
                        {
                            <span class="text-danger">No Image</span>
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(truck.QRCode))
                        {
                            <img src="@truck.QRCode" alt="QR Code" class="img-thumbnail rounded" width="100" height="100" />
                        }
                        else
                        {
                            <span class="text-danger">QR Code not available</span>
                        }
                    </td>
                    <td>
                        <div class="d-flex gap-2">
                            <button class="btn btn-warning rounded-pill"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editModal"
                                    onclick="editTruck(@truck.Id,
        '@Html.Raw(truck.PlateNumber)',
        '@Html.Raw(truck.VIN)',
        '@Html.Raw(truck.Make)',
        '@Html.Raw(truck.Model)',
        @truck.Year,
        '@Html.Raw(truck.Color)',
        '@Html.Raw(truck.FuelType)',
        @truck.GrossWeight,
        @truck.PayloadCapacity,
        @truck.FuelCapacity)">

                                Edit
                            </button>

                            <button class="btn btn-danger rounded-pill" data-bs-toggle="modal" data-bs-target="#deleteModal" onclick="deleteTruck(@truck.Id, '@truck.PlateNumber')">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!-- Create Truck Modal -->
<div class="modal fade" id="createModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Truck</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createForm" method="post" action="/Truck/Create" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()

                    <div class="mb-3">
                        <label class="form-label">Plate Number</label>
                        <input name="PlateNumber" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">VIN</label>
                        <input name="VIN" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Make</label>
                        <input name="Make" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Model</label>
                        <input name="Model" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Year</label>
                        <input type="number" name="Year" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Color</label>
                        <input name="Color" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Type</label>
                        <input name="FuelType" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Gross Weight (kg/lbs)</label>
                        <input type="number" step="0.01" name="GrossWeight" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Payload Capacity (kg/lbs)</label>
                        <input type="number" step="0.01" name="PayloadCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Capacity (liters/gallons)</label>
                        <input type="number" step="0.01" name="FuelCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Truck Image</label>
                        <input type="file" name="ImageFile" class="form-control" accept="image/*" />
                    </div>

                    <button type="submit" class="btn btn-primary">Create</button>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- Edit Truck Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Truck</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" method="post" action="/Truck/Edit" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Id" id="editId" />


                    <div class="mb-3">
                        <label class="form-label">Plate Number</label>
                        <input name="PlateNumber" id="editPlateNumber" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">VIN</label>
                        <input name="VIN" id="editVIN" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Make</label>
                        <input name="Make" id="editMake" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Model</label>
                        <input name="Model" id="editModel" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Year</label>
                        <input type="number" name="Year" id="editYear" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Color</label>
                        <input name="Color" id="editColor" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Type</label>
                        <input name="FuelType" id="editFuelType" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Gross Weight (kg/lbs)</label>
                        <input type="number" step="0.01" name="GrossWeight" id="editGrossWeight" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Payload Capacity (kg/lbs)</label>
                        <input type="number" step="0.01" name="PayloadCapacity" id="editPayloadCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fuel Capacity (liters/gallons)</label>
                        <input type="number" step="0.01" name="FuelCapacity" id="editFuelCapacity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Truck Image</label>
                        <input type="file" name="ImageFile" id="editImageFile" class="form-control" accept="image/*" />
                        <img id="editImagePreview" src="" alt="Preview Image" style="display:none; width: 100px; height: auto;">
                    </div>

                    <button type="submit" class="btn btn-warning">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- Delete Truck Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Truck</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete truck with Plate Number: <strong id="deletePlateNumber"></strong>?</p>
                <form id="deleteForm" method="post" action="/Truck/Delete">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Id" id="deleteId" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmationModalMessage">Are you sure you want to proceed with this action?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmBtn">Yes</button>
            </div>
        </div>
    </div>
</div>



<!-- Toast Container (Fixed at Top-Right) -->
<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050; top: 90vh; right: 1vw;"></div>

<!-- Toast Template (Hidden) -->
<div id="toastTemplate" class="toast align-items-center shadow-lg" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            <strong class="me-auto">Notification</strong>
            <p class="mb-0" id="toastMessage"></p>
        </div>
        @* <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button> *@
    </div>
</div>


<script defer>
    document.addEventListener("DOMContentLoaded", function () {
        const toastContainer = document.getElementById('toastContainer');
        const toastTemplate = document.getElementById('toastTemplate');
        const createForm = document.getElementById('createForm');
        const editForm = document.getElementById('editForm');
        const deleteForm = document.getElementById('deleteForm');

        function showToast(message, type = 'success') {
            const toast = toastTemplate.cloneNode(true);
            toast.removeAttribute("id");
            toast.querySelector("#toastMessage").textContent = message;

            toast.classList.add("text-white", "rounded-3", "border-0", type === "success" ? "bg-success" : type === "error" ? "bg-danger" : type === "warning" ? "bg-warning text-dark" : "bg-primary");

            toastContainer.appendChild(toast);
            new bootstrap.Toast(toast, { delay: 3000 }).show();

            toast.addEventListener("hidden.bs.toast", () => toast.remove());
        }

        function handleFormSubmit(form, confirmationMessage, callback) {
            if (!form) return;
            form.addEventListener('submit', function (e) {
                e.preventDefault();
                showConfirmationModal(confirmationMessage, callback);
            });
        }

        function submitForm(form) {
            const formData = new FormData(form);
            const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: { 'RequestVerificationToken': token }
            })
                .then(response => response.json())
                .then(data => {
                    showToast(data.message, data.success ? "success" : "error");
                    if (data.success) {
                        $(form.closest('.modal')).modal('hide');
                        setTimeout(() => location.reload(), 1500);
                    }
                })
                .catch(() => showToast('An error occurred. Please try again.', "error"));
        }

        function showConfirmationModal(message, callback) {
            document.getElementById('confirmationModalMessage').textContent = message;
            const confirmBtn = document.getElementById('confirmBtn');

            confirmBtn.replaceWith(confirmBtn.cloneNode(true)); // Remove previous event listeners
            document.getElementById('confirmBtn').addEventListener('click', () => {
                callback();
                bootstrap.Modal.getInstance(document.getElementById('confirmationModal')).hide();
            });

            new bootstrap.Modal(document.getElementById('confirmationModal')).show();
        }

        function previewImage(inputId, previewId) {
            const fileInput = document.getElementById(inputId);
            const previewElement = document.getElementById(previewId);
            if (!fileInput || !previewElement) return;

            fileInput.addEventListener('change', function (event) {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = e => {
                        previewElement.src = e.target.result;
                        previewElement.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        function editTruck(id, plateNumber, vin, make, model, year, color, fuelType, grossWeight, payloadCapacity, fuelCapacity, imageUrl) {
            document.getElementById('editId').value = id;
            document.getElementById('editPlateNumber').value = plateNumber;
            document.getElementById('editVIN').value = vin;
            document.getElementById('editMake').value = make;
            document.getElementById('editModel').value = model;
            document.getElementById('editYear').value = year;
            document.getElementById('editColor').value = color;
            document.getElementById('editFuelType').value = fuelType;
            document.getElementById('editGrossWeight').value = grossWeight;
            document.getElementById('editPayloadCapacity').value = payloadCapacity;
            document.getElementById('editFuelCapacity').value = fuelCapacity;

            const preview = document.getElementById('editImagePreview');
            if (imageUrl) {
                preview.src = imageUrl;
                preview.style.display = 'block';
            } else {
                preview.style.display = 'none';
            }

            new bootstrap.Modal(document.getElementById('editModal')).show();
        }

        function deleteTruck(id, plateNumber) {
            document.getElementById('deleteId').value = id;
            document.getElementById('deletePlateNumber').innerText = plateNumber;
        }

        function handleModalStacking() {
            document.querySelectorAll(".modal").forEach(modal => {
                modal.addEventListener("show.bs.modal", function () {
                    let zIndex = 1050 + (document.querySelectorAll(".modal.show").length * 10);
                    this.style.zIndex = zIndex;
                    setTimeout(() => {
                        document.querySelectorAll(".modal-backdrop").forEach(backdrop => {
                            if (!backdrop.classList.contains("modal-stack")) {
                                backdrop.style.zIndex = zIndex - 1;
                                backdrop.classList.add("modal-stack");
                            }
                        });
                    }, 0);
                });

                modal.addEventListener("hidden.bs.modal", function () {
                    if (!document.querySelectorAll(".modal.show").length) {
                        document.body.classList.remove("modal-open");
                    }
                });
            });
        }

        // Bind Events
        handleFormSubmit(createForm, "Are you sure you want to add this truck?", () => submitForm(createForm));
        handleFormSubmit(editForm, "Are you sure you want to edit this truck?", () => submitForm(editForm));
        handleFormSubmit(deleteForm, "Are you sure you want to delete this truck?", () => submitForm(deleteForm));

        previewImage('editImageFile', 'editImagePreview');
        handleModalStacking();
    });
</script>
